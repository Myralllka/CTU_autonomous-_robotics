#!/usr/bin/env python

from __future__ import absolute_import, division, print_function

import glob
import math
import os
import sys
import time
if not hasattr(time, "perf_counter"):
    time.perf_counter = time.clock

from aro_localization.factor_graph import FactorGraph
from geometry_msgs.msg import Point, Transform, TransformStamped, PoseStamped, Quaternion, Pose
from nav_msgs.msg import Odometry, Path
import numpy as np
import rospy
from ros_numpy import msgify, numpify
from timeit import default_timer as timer
from tf2_py import TransformException
import tf2_ros
from apriltag_ros.msg import AprilTagDetectionArray, AprilTagDetection
from tf.transformations import euler_from_quaternion, quaternion_from_euler, quaternion_multiply, quaternion_inverse, \
    euler_from_matrix, euler_matrix, translation_matrix
import tf2_geometry_msgs  # do not remove, this allows calling tf.transform() on geometry_msgs types
from threading import Lock, Thread
from visualization_msgs.msg import MarkerArray, Marker
from kobuki_msgs.msg import SensorState
from gazebo_msgs.msg import ContactsState


class FactorGraphLocalizationNode(object):
    """Node for localization of a mobile robot in 2D using odometry, markers and ICP odometry."""

    def __init__(self):
        self.map_frame = rospy.get_param('~map_frame', 'fused_map')
        """Frame created by this node."""
        self.body_frame = None  # read from incoming odometry messages
        """Frame of the robot body."""
        self.odom_frame = None  # read from incoming odometry messages
        """Frame of the incoming odometry."""
        self.fuse_icp_slam = rospy.get_param('~fuse_icp_slam', False)
        """Whether to fuse ICP SLAM odometry."""

        self.tf_timeout = rospy.Duration(float(rospy.get_param('~tf_timeout', 0.25)))
        """Timeout waiting for TF transforms [s]."""

        self.rate = rospy.Rate(rospy.get_param('~optimization_rate', 10))
        """Maximum rate at which optimization is done [Hz]. If it takes longer, the rate can be lower."""

        self.min_time_between_odom_msgs = rospy.Duration(float(rospy.get_param("~min_time_between_odom_msgs", 0.2)))
        """Time-domain subsampling of incoming odometry messages. If two odom messages are received in a time interval
        shorter than this duration, the newer message is ignored."""

        self.visualize = bool(rospy.get_param("~visualize", True))
        """Whether to show visualization of the factorgraph optimization."""

        # TASK INPUT START

        self.abs_marker_id = int(rospy.get_param('abs_marker_id', 7))
        """ID of the Apriltag from family tag16h5 used as absolute marker. This is given as task input."""
        self.rel_marker_id = int(rospy.get_param('rel_marker_id', 4))
        """ID of the Apriltag from family tag16h5 used as relative marker. This is given as task input."""
        ma = (
            float(rospy.get_param("abs_marker_x", 1.0)),
            float(rospy.get_param("abs_marker_y", 0.07)),
            float(rospy.get_param("abs_marker_yaw", 0.2)),
        )

        mr_gt = None
        if rospy.has_param("rel_marker_gt_x"):
            mr_gt = (
                float(rospy.get_param("rel_marker_gt_x", -2.667)),
                float(rospy.get_param("rel_marker_gt_y", -0.6)),
                float(rospy.get_param("rel_marker_gt_yaw", np.pi)),
            )

        # TASK INPUT END

        self.c_odom_default = float(rospy.get_param("~c_odom_default", 1.0))
        """Default cost used for odometry measurements if their twist covariance is invalid."""
        self.c_odom_scale = float(rospy.get_param("~c_odom_scale", 1.0))
        """Scale of cost used for odometry measurements with valid twist covariance."""
        self.c_odom_bumper_scale = float(rospy.get_param("~c_odom_bumper_scale", 0.0))
        """Scale of cost used for odometry measurements when bumper is active."""
        self.c_icp_default = float(rospy.get_param("~c_icp_default", 1.0))
        """Default cost used for ICP odometry measurements if their twist covariance is invalid."""
        self.c_icp_scale = float(rospy.get_param("~c_icp_scale", 1.0))
        """Scale of cost used for ICP odometry measurements with valid twist covariance."""
        self.c_icp_yaw_scale = float(rospy.get_param("~c_icp_yaw_scale", 1.0))
        """Extra scale for ICP yaw residuals."""
        self.c_mr_scale = float(rospy.get_param("~c_mr_scale", 1.0))
        """Scale of cost used for relative marker pose."""
        self.c_ma_scale = float(rospy.get_param("~c_ma_scale", 2.0))
        """Scale of cost used for absolute marker pose."""
        self.c_marker_yaw_scale = float(rospy.get_param("~c_marker_yaw_scale", 1.0))
        """Extra scale for marker yaw residuals."""

        self.ignore_spurious_markers = bool(rospy.get_param("~ignore_spurious_markers", True))
        """Whether to ignore markers that were not seen at least twice in a row."""
        self.spurious_marker_duration_threshold = rospy.Duration(
            float(rospy.get_param("~spurious_marker_duration_threshold", 1.0)))
        """Maximum duration between two valid marker detections. If the duration is larger, the marker is discarded as
        spurious detection."""
        self.marker_max_dist = float(rospy.get_param("~marker_max_dist", 3.2))
        """Maximum distance of valid markers [m]. Markers further away are ignored."""
        self.marker_max_roll_pitch = float(rospy.get_param("~marker_max_roll_pitch", 0.5))
        """Maximum roll and pitch of valid markers [rad]. Markers with higher inclination are ignored."""

        self.publish_tf = rospy.get_param('~publish_tf', True)
        """Whether to publish the map->odom transform."""
        self.invert_tf = rospy.get_param('~invert_tf', True)
        """Whether to invert the published transform so that odom->map is published. This is a hack to allow multiple
        "parents" for the odom transform (one of them is ICP frame)."""

        # Prepare the factorgraph structure

        # (loss, f_scale) tested configs: ('linear', 1.0), ('soft_l1', 0.05), ('huber', 1.0), ('cauchy', 1.9)
        solver_options = {
            'loss': rospy.get_param("~opt_loss", "soft_l1"),
            'f_scale': float(rospy.get_param("~opt_f_scale", 0.05)),
            'max_nfev': int(rospy.get_param("~opt_max_nfev", 40)),
            'x_scale': rospy.get_param("~opt_x_scale", 1),  # float or 'jac'
            'verbose': int(rospy.get_param("~opt_verbose", 1)),
            'ftol': float(rospy.get_param("~opt_ftol", 1e-3)),
            'gtol': float(rospy.get_param("~opt_gtol", 1e-8)),
            'xtol': float(rospy.get_param("~opt_xtol", 1e-4)),
            'tr_options': {
                'maxiter': int(rospy.get_param("~opt_tr_maxiter", 10)),
                'atol': float(rospy.get_param("~opt_tr_atol", 1e-4)),
                'btol': float(rospy.get_param("~opt_tr_btol", 1e-4)),
            },
        }
        self.fg = FactorGraph(ma=ma, mr_gt=mr_gt,
                              time_step=self.min_time_between_odom_msgs.to_nsec(), fuse_icp=self.fuse_icp_slam,
                              solver_options=solver_options, icp_yaw_scale=self.c_icp_yaw_scale,
                              marker_yaw_scale=self.c_marker_yaw_scale)
        """The factorgraph implementation."""
        self.mutex = Lock()
        """Mutex protecting internal state of the factorgraph. It is essential to not add measurements during
        optimization."""

        # Helper variables for time synchronization of measurements

        self.last_markers = None
        """Last message with marker detections. It is reset to `None` after receiving odom and updating the graph."""
        self.last_odom = None
        """Last odometry message."""
        self.last_icp_odoms = list()
        """All ICP odometry messages since last update. It is reset to empty list after receiving odom and updating the
        graph."""
        self.last_gt_odom = None
        """Last ground truth odometry message. It is reset to `None` after receiving odom and updating the graph."""
        self.last_marker_stamps = {}
        """Dict containing the last time each marker was seen. It is used to detect spurious marker detections."""
        self.bumpers_active = False
        """Whether bumpers are currently activated."""

        # Prepare publishers and subscribers

        self.tf_pub = tf2_ros.TransformBroadcaster()
        """Publisher of transforms."""

        self.tf = tf2_ros.Buffer()
        """Transform buffer used for querying the TF tree."""
        self.tf_sub = tf2_ros.TransformListener(self.tf)
        """Transform listener filling `self.tf` with transforms published by other nodes."""

        self.odom_pub = rospy.Publisher('fused_odom', Odometry, queue_size=5)
        self.rel_marker_pub = rospy.Publisher('relative_marker_pose', PoseStamped, queue_size=5)
        self.marker_viz_pub = rospy.Publisher('fused_odom_viz', MarkerArray, queue_size=5)
        self.path_pub = rospy.Publisher('fused_odom_path', Path, queue_size=5)

        self.marker_detections_sub = rospy.Subscriber(
            'apriltag', AprilTagDetectionArray, self.process_marker_detections, queue_size=5)
        self.odom_sub = rospy.Subscriber('odom', Odometry, self.process_odom, queue_size=50)
        self.icp_odom_sub = rospy.Subscriber('icp_odom', Odometry, self.process_icp_odom, queue_size=50)
        self.gt_odom_sub = rospy.Subscriber('ground_truth_odom', Odometry, self.process_gt_odom, queue_size=50)
        self.bumpers_sub = rospy.Subscriber(
            'mobile_base/sensors/core', SensorState, self.process_bumpers, queue_size=50)
        self.bumpers_sim_sub = rospy.Subscriber('bumper', ContactsState, self.process_bumpers_sim, queue_size=50)

    def process_marker_detections(self, msg):
        """Callback for detected markers.

        :param AprilTagDetectionArray msg: The received message.
        """
        self.last_markers = msg

    def process_icp_odom(self, msg):
        """Callback for ICP odometry.

        :param Odometry msg: The received message.
        """
        self.last_icp_odoms.append(msg)

    def process_gt_odom(self, msg):
        """Callback for ground truth odometry.

        :param Odometry msg: The received message.
        """
        self.last_gt_odom = msg

    def process_bumpers(self, msg):
        """Callback for real robot state (for bumper state extraction).

        :param SensorState msg: The received message.
        """
        self.bumpers_active = msg.bumper > 0

    def process_bumpers_sim(self, msg):
        """Callback for simulated bumper.

        :param gazebo_msgs.msg.ContactsState msg: The received message.
        """
        self.bumpers_active = len(msg.states) > 0

    def process_odom(self, msg):
        """Callback for odometry. This callback updates the factorgraph internal state.

        :param Odometry msg: The received message.
        """
        self.odom_frame = msg.header.frame_id
        self.body_frame = msg.child_frame_id

        # If this is the first odometry message, just store it in the factorgraph and stop, there is nothing to do.
        if self.last_odom is None:
            self.last_odom = msg
            with self.mutex:
                yaw = euler_from_quaternion(numpify(msg.pose.pose.orientation))[2]
                self.fg.x[0] = [msg.pose.pose.position.x, msg.pose.pose.position.y, yaw]
                self.fg.x_odom[0] = self.fg.x[0]
            return

        # Time-domain subsampling of odometry - it helps keeping the factorgraph size reasonable.
        dt = msg.header.stamp - self.last_odom.header.stamp
        if dt < self.min_time_between_odom_msgs:
            return

        # Compute odometry measurement and its cost

        # If we did not apply the time-domain subsampling, this could be simply dt * velocity.
        z_odom = self.inverse_kinematics(self.last_odom, msg)
        t_odom = self.last_odom.header.stamp.to_nsec()
        # odom measurement cost is proportional to the inverse of velocity (twist) standard deviation
        c_odom = self.get_cost_from_twist_covariance(msg, self.c_odom_default, self.c_odom_scale)
        if self.bumpers_active:
            z_odom = [0, 0, 0]
            c_odom *= self.c_odom_bumper_scale

        self.last_odom = msg

        # Ground truth odometry (only in simulator)
        if self.last_gt_odom is None:
            z_gt_odom = (np.nan, np.nan, np.nan)
        else:
            yaw = euler_from_quaternion(numpify(self.last_gt_odom.pose.pose.orientation))[2]
            z_gt_odom = (self.last_gt_odom.pose.pose.position.x, self.last_gt_odom.pose.pose.position.y, yaw)
            self.last_gt_odom = None

        # Compute ICP measurement and its cost

        z_icp = list()
        c_icp = list()
        t_icp = list()
        last_icp_odoms = list(self.last_icp_odoms)  # copy to handle parallel updates
        self.last_icp_odoms = list()
        for icp_msg in last_icp_odoms:
            t_icp.append(icp_msg.header.stamp.to_nsec())
            z_icp.append(numpify(icp_msg.pose.pose))
            c_icp.append(self.get_cost_from_twist_covariance(icp_msg, self.c_icp_default, self.c_icp_scale))

        # Compute the marker detection measurements and their costs

        if self.last_markers is None:
            t_markers = None
            c_mr = self.c_mr_scale
            c_ma = self.c_ma_scale
            z_mr = z_ma = (np.nan, np.nan, np.nan)
        else:
            last_markers = self.last_markers
            self.last_markers = None
            t_markers = last_markers.header.stamp.to_nsec()
            z_ma, c_ma, z_mr, c_mr = self.extract_markers(last_markers)

        # Add the measurements to the factorgraph. It is essential to do it with the mutex locked.
        with self.mutex:
            self.fg.add_z(z_odom, c_odom, z_mr, c_mr, z_ma, c_ma, z_icp, c_icp, z_gt_odom, t_odom, t_markers, t_icp)

    def get_cost_from_twist_covariance(self, msg, c_default, c_scale):
        """Computes cost for a measurement based on covariance of odometry twist (velocity).

        :param nav_msgs.msg.Odometry msg: The odometry message.
        :param float c_default: Default cost to be used in case the covariance is invalid.
        :param float c_scale: Scale of the cost.
        :return: The cost.
        :rtype: float
        """
        cov = np.array(msg.twist.covariance).reshape((6, 6))
        return c_default if cov[0, 0] <= 0 else c_scale / np.sqrt(max(cov[0, 0], cov[1, 1], cov[5, 5]))

    def inverse_kinematics(self, old_pose_msg, new_pose_msg):
        """Computation of inverse kinematics - i.e. we know the last pose and the new pose and want to know the
        relative motion in the body frame of the last pose that will get the robot to the new pose.

        :param nav_msgs.msg.Odometry old_pose_msg: Previous pose.
        :param nav_msgs.msg.Odometry new_pose_msg: New pose.
        :return: The difference of the two poses expressed in the body frame of the previous pose.
        :rtype: tuple
        """
        old_pose = numpify(old_pose_msg.pose.pose)
        new_pose = numpify(new_pose_msg.pose.pose)
        diff = np.matmul(np.linalg.inv(old_pose), new_pose)
        dx = diff[0, 3]
        dy = diff[1, 3]
        dw = euler_from_matrix(diff[0:3, 0:3])[2]
        return dx, dy, dw

    def optimize(self):
        """Perform factorgraph-based trajectory optimization and publish the results."""

        if len(self.fg.z_odom) == 0:
            return

        # Make local copies of the factorgraph internal state so that new measurements can be added to it while the
        # optimization is running. We will only optimize as many measurements as are available up to now.
        # Also, the measurements are converted from Python lists to numpy arrays to allow faster operations on them
        # not that they have a static size (Python list has good performance for resizing, but bad for computations;
        # numpy arrays have bad performance for resizing, but good for computations).
        with self.mutex:
            x = np.array(self.fg.x)
            last_t = rospy.Time(0, self.fg.t_odom[-1])
            mr = np.array(self.fg.mr)
            ma = np.array(self.fg.ma)
            z_odom = np.array(self.fg.z_odom).transpose()
            z_mr = np.array(self.fg.z_mr).transpose()
            z_ma = np.array(self.fg.z_ma).transpose()
            z_icp = np.array(self.fg.z_icp).transpose()
            c_odom = np.array(self.fg.c_odom)
            c_ma = np.array(self.fg.c_ma)
            c_mr = np.array(self.fg.c_mr)
            c_icp = np.array(self.fg.c_icp)
            self.fg.x_pre = np.array(x)

        # Run optimization on the local copies
        x, mr = self.fg.optimize(x, mr, ma, z_odom, z_mr, z_ma, z_icp, c_odom, c_mr, c_ma, c_icp)

        # Write the optimized estimates back to the factorgraph
        with self.mutex:
            self.fg.x_post = np.array(x)
            # If measurements were added during optimization, fg.x is longer than our local copy. Make sure to only
            # update as many values as we optimized.
            self.fg.x[:len(x)] = x
            self.fg.mr = mr
            # Converting mr to list prevents the visualization code calling quaternion_from_euler from changing the
            # mr values (this is a usability bug of quaternion_from_euler).
            mr = np.ravel(mr).tolist()
            # If measurements were added during optimization, recompute the added pose estimates based on the optimized
            # values that were just computed - i.e. extend the last optimized pose with new odometry measurements to
            # create better initial guesses for the newly received measurements. This step is not needed in theory, but
            # it should help the optimizer in the next step by removing the discontinuity that might occur.
            for i in range(len(x), len(self.fg.x)):
                self.fg.x[i] = self.fg.get_world_pose(self.fg.z_odom[i - 1], self.fg.x[i - 1]).ravel().tolist()
            self.fg.x_post_all = np.array(self.fg.x)

        # Publish messages and transforms

        # Fused odometry message
        msg = Odometry()
        msg.header.frame_id = self.map_frame
        msg.header.stamp = last_t
        msg.child_frame_id = self.body_frame
        msg.pose.pose.position.x = x[-1][0]
        msg.pose.pose.position.y = x[-1][1]
        msg.pose.pose.orientation = msgify(Quaternion, quaternion_from_euler(0, 0, x[-1][2]))
        self.odom_pub.publish(msg)

        try:
            # The transform should already be there as we have already received the corresponding odom message and
            # finished the optimization. That's why the transform timeout is so short here.
            body_to_odom = self.tf.lookup_transform(self.body_frame, self.odom_frame, last_t, rospy.Duration(0.001))
            body_to_odom_np = numpify(body_to_odom.transform)
            map_to_body_np = numpify(msg.pose.pose)

            # Compute the differential transform map->odom
            map_to_odom_np = np.matmul(map_to_body_np, body_to_odom_np)

            # Publish the transform
            tf = TransformStamped()
            tf.header.frame_id = self.map_frame if not self.invert_tf else self.odom_frame
            tf.header.stamp = last_t
            tf.child_frame_id = self.odom_frame if not self.invert_tf else self.map_frame
            tf.transform = msgify(Transform, map_to_odom_np if not self.invert_tf else np.linalg.inv(map_to_odom_np))
            self.tf_pub.sendTransform(tf)
        except TransformException as ex:
            rospy.logwarn_throttle(1.0, 'Could not transform %s to frame %s: %s.', self.odom_frame, self.body_frame, ex)

        # Publish the pose of the relative marker

        if not np.any(np.isnan(mr)):  # only publish when the marker pose changed from the init value
            p = np.array(mr).ravel().tolist()
            mr_pose = PoseStamped()
            mr_pose.header.frame_id = self.map_frame
            mr_pose.header.stamp = last_t
            mr_pose.pose.position.x, mr_pose.pose.position.y = p[0], p[1]
            mr_pose.pose.orientation = msgify(Quaternion, quaternion_from_euler(0, 0, p[2]))

            self.rel_marker_pub.publish(mr_pose)

        # Marker positions visualization message
        markers_msg = MarkerArray()

        # Relative marker
        if not np.any(np.isnan(mr)):
            marker = self.create_arrow_marker(mr)
            marker.header.stamp = msg.header.stamp
            marker.id = self.rel_marker_id
            marker.color.b = 1
            marker.color.r = 1
            markers_msg.markers.append(marker)

        # Relative marker ground truth
        if self.fg.mr_gt is not None:
            marker = self.create_arrow_marker(self.fg.mr_gt[:, 0])
            marker.header.stamp = msg.header.stamp
            marker.id = -self.rel_marker_id
            marker.color.a = 0.5
            marker.color.b = 1
            marker.color.r = 1
            markers_msg.markers.append(marker)

        # Absolute marker
        marker = self.create_arrow_marker(ma)
        marker.header.stamp = msg.header.stamp
        marker.id = self.abs_marker_id
        markers_msg.markers.append(marker)

        self.marker_viz_pub.publish(markers_msg)

        # Whole optimized trajectory message (not very efficient, mostly for debug)
        msg = Path()
        msg.header.frame_id = self.map_frame
        msg.header.stamp = last_t
        for i in range(len(x)):
            pose = PoseStamped()
            pose.header = msg.header
            pose.pose.position.x = x[i][0]
            pose.pose.position.y = x[i][1]
            pose.pose.orientation = msgify(Quaternion, quaternion_from_euler(0, 0, x[i][2]))
            msg.poses.append(pose)
        self.path_pub.publish(msg)

    def create_arrow_marker(self, pos):
        # Beware, if pos[2] result would be np.ndarray, the quaternion_from_euler call would overwrite the pos[2] value!
        # Thus, we make a local copy of pos.
        p = np.array(pos).ravel().tolist()
        marker = Marker()
        marker.header.frame_id = self.map_frame
        marker.color.a = 1
        marker.scale.x = marker.scale.y = marker.scale.z = 0.3
        marker.action = Marker.ADD
        marker.type = Marker.ARROW
        marker.pose.position.x, marker.pose.position.y = p[0], p[1]
        marker.pose.orientation = msgify(Quaternion, quaternion_from_euler(0, 0, p[2]))
        return marker

    def visu(self):
        """Endless loop displaying the factorgraph visualization. It will be run in a background thread."""
        rate = rospy.Rate(1)
        for f in glob.glob("/tmp/fig*.png"):
            os.remove(f)
        while not rospy.is_shutdown():
            rate.sleep()
            with self.mutex:
                x = np.array(self.fg.x)
                mr = np.array(self.fg.mr)
                ma = np.array(self.fg.ma)
                z_odom = np.array(self.fg.z_odom).transpose()
                z_mr = np.array(self.fg.z_mr).transpose()
                z_ma = np.array(self.fg.z_ma).transpose()
                z_icp = np.array(self.fg.z_icp).transpose()
                z_gt_odom = np.array(self.fg.z_gt_odom).transpose()
                last_optimized_idx = self.fg.last_optimized_idx
            self.fg.visu(x, mr, ma, z_odom, z_mr, z_ma, z_icp, z_gt_odom, last_optimized_idx)

    def reset(self):
        """Handle ROS time jump. Not implemented for this node."""
        sys.exit(1)

    def run(self):
        """Start the node and do its work."""
        if self.visualize:
            visu_thread = Thread(target=self.visu)
            visu_thread.start()

        while not rospy.is_shutdown():
            try:
                self.rate.sleep()
            except rospy.ROSTimeMovedBackwardsException:
                rospy.logwarn("ROS time moved backwards")
                self.reset()
                continue
            except rospy.ROSInterruptException:
                break

            self.optimize()

        if self.visualize:
            visu_thread.join()

    def extract_markers(self, m):
        """Extract marker measurements from an Apriltag detection message.

        This code does a lot of pre-filtering of the detections because the output of the apriltag detector is not very
        reliable. Choose difficulty of the task by selecting easy/medium/hard configs in aro_loc.launch. The more
        difficult configs do less pre-filtering, which results in more false positive measurements which confuse the
        localization process.

        :param apriltag_ros.msg.AprilTagDetectionArray m: The Apriltag detections.
        :return: The measurements (z_ma, c_ma, z_mr, c_mr).
        :rtype: tuple
        """
        z_ma = (np.nan, np.nan, np.nan)
        z_mr = (np.nan, np.nan, np.nan)
        c_ma = self.c_ma_scale
        c_mr = self.c_mr_scale

        for det in m.detections:
            if len(det.id) != 1:  # len != 1 would be for bundled tags, but we don't use bundles
                continue
            det_id = det.id[0]
            if det_id not in (self.rel_marker_id, self.abs_marker_id):  # check if it is a marker of interest
                continue
            # Discard first detection of each marker, but remember its timestamp for spurious tag detection.
            if det_id not in self.last_marker_stamps:
                self.last_marker_stamps[det_id] = det.pose.header.stamp
                continue
            # Discard spurious tag detections (i.e. tags without multiple successive detections).
            time_from_previous = det.pose.header.stamp - self.last_marker_stamps[det_id]
            self.last_marker_stamps[det_id] = det.pose.header.stamp
            if self.ignore_spurious_markers and time_from_previous > self.spurious_marker_duration_threshold:
                rospy.logwarn("Ignoring spurious detection of marker " + str(det_id))
                continue

            # Transform the marker pose from camera frame to body frame.
            try:
                pose_stamped = PoseStamped()
                pose_stamped.pose = det.pose.pose.pose
                pose_stamped.header = det.pose.header
                body_pose = self.tf.transform(pose_stamped, self.body_frame, timeout=self.tf_timeout).pose
            except tf2_ros.TransformException as e:
                rospy.logerr("Could not transform apriltag to body frame: " + str(e))
                continue

            # Throw away markers that are far, they are probably bad detections.
            x = body_pose.position.x
            y = body_pose.position.y
            dist = np.linalg.norm((x, y))
            if dist > self.marker_max_dist:
                rospy.logerr("Discarding marker %i, it is %.1f m far." % (det_id, dist))
                continue
            rospy.loginfo("Marker %i is %.1f m far." % (det_id, dist))

            # Rotate the apriltag frame so that it corresponds to x forward, y left and z up.
            marker_frame_rot = np.array(quaternion_from_euler(-math.pi / 2, math.pi / 2, 0))
            q = numpify(body_pose.orientation)
            q = quaternion_multiply(q, marker_frame_rot)
            roll, pitch, yaw = euler_from_quaternion(q)

            if max(abs(roll), abs(pitch)) > self.marker_max_roll_pitch:
                rospy.logerr("Discarding marker %i due to too high roll or pitch." % (det_id,))
                continue

            # Cost of the marker is proportional to its distance from the robot and the angle under which it is seen.
            base_cost_dist = ((self.marker_max_dist - dist) / self.marker_max_dist + 0.1)
            base_cost_ang = 1.0 - np.abs(yaw) / (np.pi / 2) + 0.1
            base_cost = min(base_cost_dist, base_cost_ang)

            if det_id == self.rel_marker_id:
                z_mr = (x, y, yaw)
                # c_mr = self.c_mr_scale * np.power(base_cost, 2)
                c_mr = self.c_mr_scale * base_cost
            else:
                z_ma = (x, y, yaw)
                # c_ma = self.c_ma_scale * np.power(base_cost, 2)
                c_ma = self.c_ma_scale * base_cost

        return z_ma, c_ma, z_mr, c_mr


def main():
    rospy.init_node('aro_localization')
    node = FactorGraphLocalizationNode()
    node.run()


if __name__ == '__main__':
    main()
